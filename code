DRIVER CLASS

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
public class Driver {
	public static void main(String args[]) throws Exception
	{
 Configuration conf = new Configuration();
 try{
 Job job = new Job(conf,"5.1");
 job.setJarByClass(Driver.class);
 job.setOutputKeyClass(NullWritable.class);
 job.setOutputValueClass(Text.class);
 
 job.setMapperClass(Smapper.class);
 job.setNumReduceTasks(0);
 
 job.setInputFormatClass(TextInputFormat.class);
 job.setOutputFormatClass(TextOutputFormat.class);
 
 Path out = new Path(args[1]);
 Path in = new Path(args[0]);
 FileOutputFormat.setOutputPath(job,out);
 FileInputFormat.addInputPath(job,in);
 job.waitForCompletion(true);
 }
 catch(Exception e)
 {
	 
 }
}
}



MAPPER

import org.apache.hadoop.conf.*;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.mapreduce.Mapper.Context;
import org.apache.hadoop.io.Text;
import java.io.IOException;

public class Smapper extends Mapper<LongWritable,Text,NullWritable,Text> {
public void map(LongWritable key,Text value, Context context) throws IOException,InterruptedException
{
	String[] arr= value.toString().split("\\|");
	if((arr.length>0)&&(arr[0]!=null)&&(arr[1]!=null)&&(!arr[0].equalsIgnoreCase("na"))&&(!arr[1].equalsIgnoreCase("na")))
	{
		context.write(NullWritable.get(),value);
	}
}}
